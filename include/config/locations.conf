location ~ /cow/(say|think|random)$ {
	default_type "text/plain; charset=utf-8";
	content_by_lua_file lua/cow.lua;
}
location /cow {
	default_type "text/plain; charset=utf-8";
	content_by_lua_file lua/cowhelp.lua;
}
location ~ ^/gtk/(\d+)$ {
	return 302 $uri/;
}
location ~ ^/gtk/(\d+)/(.*)$ {
	set $port '';
	access_by_lua_block {
		port = tonumber(ngx.var[1]);
		port = 8080 + port;
		ngx.var.port = port;
	}
	proxy_pass http://0.0.0.0:$port/$2;
}
location /redir {
	rewrite_by_lua_block {
		local uri = ngx.unescape_uri(ngx.var.arg_q);
		if uri == "" or uri == nil then
			return ngx.redirect("http://fakebsod.com/generic");
		elseif string.starts(uri, "http://") or string.starts(uri, "https://") then
			return ngx.redirect(uri);
		else
			return ngx.redirect("http://" .. uri);
		end
	}
}
location /ngxstats {
	stub_status	on;
	access_log	off;
	#allow		1.1.1.1;
	#deny		all;
}
#location ~ ^/(glances.js|api|9a360c92ce9bda60a8da6389741dcfbf.png) {
#	proxy_pass http://0.0.0.0:61208;
#}
location /stats/ {
	proxy_pass http://0.0.0.0:61208/;
}
location ~ ^/stats/(.*)$ {
	proxy_pass http://0.0.0.0:61208/$1;
}
#location ~ ^/stats/(\d+)$ {
#	proxy_pass http://0.0.0.0:61208/$1;
#}
location = /render/md {
	internal;
	allow           all;
	add_header      'Vary' 'Accept';
	add_header		X-Render "markdown";
	default_type	text/html;
	alias           /srv/http/render/md.html;
}
location = /render/video {
	internal;
	allow           all;
	add_header      'Vary' 'Accept';
	add_header  	X-Render "video";
	default_type	text/html;
	alias           /srv/http/render/video.html;
}
location = /render/audio {
	internal;
	allow           all;
	add_header      'Vary' 'Accept';
	add_header  	X-Render "audio";
	default_type	text/html;
	alias           /srv/http/render/audio.html;
}
location ~* \.md$ {
	error_page 		420 = /render/md;
	include         include/config/error.conf;
	charset_types 	*;
	charset			utf-8;
	set 			$render true;
	if (!-f $request_filename) {
		return 404;
	}
	if ($args ~ '\braw[=&]?' )
	{
		set 		$render false;
	}
	if ($uri ~ '^\/dl' )
	{
		set 		$render false;
	}
	if ($uri ~ '\b(?:json|xml)\b' )
	{
		set 		$render false;
		add_header  Content-Disposition 'attachment; filename="$request_basename"';
	}
	if ( $http_accept ~* "text/markdown")
	{
		set $render false;
	}
	if ($render = true) {
		return 420;
	}
}
location ~* \.(mp4|webm|3gp|ogv|avi)$ {
	error_page	420 = /render/video;
	include     include/config/error.conf;
	add_header 	'Vary' 'Accept';
	include 	include/config/renderer.conf;
	if ( $render = true ) {
		return 420;
	}
}
location ~* \.(mp3|oga|ogg|m4a|wav)$ {
	error_page	420 = /render/audio;
	include     include/config/error.conf;
	add_header 	'Vary' 'Accept';
	add_header 	X-Render "audio";
	include		include/config/renderer.conf;
#	if ($render = true) {
#		return 420;
#	}
}
