location ~ /cow/(say|think|random)$ {
	default_type "text/plain; charset=utf-8";
	content_by_lua_block {
		local args, err = ngx.req.get_uri_args();
		local url = ngx.var.scheme .. "://" .. ngx.var.host .. "/cow";
		local is = function(val)
			return val == nil or val == '';
		end;
		local args_error = function(key)
			ngx.say("Unsupported value on $GET["..key.."]: " .. args[key]);
			ngx.say("");
			ngx.say("Reference ".. url .. ngx.var.uri .. "?help");
			ngx.exit(406);
		end;

		local set_args = function(eye, tongue, mode, cow)
			local cow_args = "";
			if not is(cow) then
				if os.execute('test -f "'.. "/usr/share/cows/"..cow..".cow" ..'"') == 0 then
					ngx.say("");
					cow_args = cow_args .. " -f " .. "/usr/share/cows/" .. cow .. ".cow";
				elseif cow == "random" then
					cow_args = cow_args .. " -f " .. "/usr/share/cows/" .. termcow.cows[math.random(1,#termcow.cows)] .. ".cow";
				else
					args_error("cow");
				end
			end;
			if is(mode) then
				if not is(tongue) then
					cow_args =  cow_args .. " -T " .. tongue;
				end;
				if not is(eye) then
					cow_args =  cow_args .. " -e " .. eye;
				end;
			else
				if mode == "" then
					cow_args = cow_args;
				elseif mode == "random" then
					cow_args = cow_args .. " ".. termcow.modes[math.random(1,8)].." ";
				elseif mode == "borg" then
					cow_args = cow_args .. " -b ";
				elseif mode == "dead" then
					cow_args = cow_args .. " -d ";
				elseif mode == "greedy" then
					cow_args = cow_args .. " -g ";
				elseif mode == "paranoia" then
					cow_args = cow_args .. " -p ";
				elseif mode == "stoned" then
					cow_args = cow_args .. " -s ";
				elseif mode == "tired" then
					cow_args = cow_args .. " -t ";
				elseif mode == "wired" then
					cow_args = cow_args .. " -w ";
				elseif mode == "youth" then
					cow_args = cow_args .. " -y ";
				else
					args_error("mode");
				end;
			end;
			return cow_args;
		end;
		if args["help"] ~= nil then
			ngx.say( url .. "/say" .. " usage:");
			ngx.say("  GET " .. url .. "/say");
			ngx.say("  GET " .. url .. "/say" .. "?[args]");
			ngx.say("");
			ngx.say( url .. "/think" .. " usage:");
			ngx.say("  GET " .. url .. "/think");
			ngx.say("  GET " .. url .. "/think" .. "?[args]");
			ngx.say("");
			ngx.say("");
			ngx.say("args:");
			ngx.say("   help:        show this text.");
			ngx.say("   msg:         text to say/think.");
			ngx.say("   eye:         at most 2 characters.");
			ngx.say("   tongue:      at most 2 characters.");
			ngx.say("   mode:        preset for appearence.");
			ngx.say("   mode:values: random borg dead greedy paranoia stoned tired wired youth");
			ngx.say("   cow:         use alternate cowfile.");
			ngx.say("   cow:values:");
			local cols , prevlen = 0, 0;
			for idx ,line in ipairs(termcow.cows) do
				if cols == 0 then
					ngx.print("       ");
				else
					for i = 0,20-prevlen do
						ngx.print(" ");
					end;
				end
				if line == "random" then
					ngx.say(line);
					cols = 0;
				else
					if cols < 2 then
						ngx.print(line);
						cols = cols + 1;
					else
						ngx.say(line);
						cols = 0;
					end
					prevlen = line:len();
				end;
			end;
		else
			local handle = io.popen(
				"cow" .. (ngx.var[1] == "random" and termcow.op[math.random(1,2)] or ngx.var[1] ) ..
				set_args(args["eye"], args["tongue"], args["mode"], args["cow"]) ..
				" -W " .. (args["col"] or "22") ..
				" " ..
				( args["msg"] or "moo")
			);
			ngx.say(handle:read("*a"));
			handle:close();
		end
	}
}
location = /cow {
	default_type "text/plain; charset=utf-8";
	content_by_lua_block {
		local url = ngx.var.scheme .. "://" .. ngx.var.host .. "/cow";
		ngx.say( url .. "/say" .. " usage:");
		ngx.say("  GET " .. url .. "/say");
		ngx.say("  GET " .. url .. "/say" .. "?[args]");
		ngx.say("");
		ngx.say( url .. "/think" .. " usage:");
		ngx.say("  GET " .. url .. "/think");
		ngx.say("  GET " .. url .. "/think" .. "?[args]");
		ngx.say("");
		ngx.say("");
		ngx.say("args:");
		ngx.say("   eye:         at most 2 characters.");
		ngx.say("   tongue:      at most 2 characters.");
		ngx.say("   mode:        preset for appearence.");
		ngx.say("   mode:values: random borg dead greedy paranoia stoned tired wired youth");
		ngx.say("   cow:         use alternate cowfile.");
		ngx.say("   cow:values:");
		local cols , prevlen = 0, 0;
		for idx ,line in ipairs(termcow.cows) do
			if cols == 0 then
				ngx.print("       ");
			else
				for i = 0,20-prevlen do
					ngx.print(" ");
				end;
			end
			if line == "random" then
				ngx.say(line);
				cols = 0;
			else
				if cols < 2 then
					ngx.print(line);
					cols = cols + 1;
				else
					ngx.say(line);
					cols = 0;
				end
				prevlen = line:len();
			end;
		end;
	}
}
location ~ ^/gtk/(\d+)$ {
	return 302 $uri/;
}
location ~ ^/gtk/(\d+)/(.*)$ {
	set $port '';
	access_by_lua_block {
		port = tonumber(ngx.var[1]);
		port = 8080 + port;
		ngx.var.port = port;
	}
	proxy_pass http://0.0.0.0:$port/$2;
}

location = /render/md {
	internal;
	allow           all;
	add_header      'Vary' 'Accept';
	add_header  	X-Render "markdown";
	default_type	text/html;
	alias           /srv/http/render/md.html;
}
location = /render/video {
	internal;
	allow           all;
	add_header      'Vary' 'Accept';
	add_header  	X-Render "video";
	default_type	text/html;
	alias           /srv/http/render/video.html;
}
location = /render/audio {
	internal;
	allow           all;
	add_header      'Vary' 'Accept';
	add_header  	X-Render "audio";
	default_type	text/html;
	alias           /srv/http/render/audio.html;
}
location ~* \.md$ {
	error_page 		420 = /render/md;
	include         error.conf;
	charset_types 	*;
	charset			utf-8;
	set 			$render true;
	if (!-f $request_filename) {
		return 404;
	}
	if ($args ~ '\braw[=&]?' )
	{
		set 		$render false;
	}
	if ($uri ~ '^\/old' )
	{
		set 		$render false;
	}
	if ($uri ~ '\b(?:json|xml)\b' )
	{
		set 		$render false;
		add_header  Content-Disposition 'attachment; filename="$request_basename"';
	}
	if ( $http_accept ~* "text/markdown")
	{
		set $render false;
	}
	if ($render = true) {
		return 420;
	}
}
location ~* \.(mp4|webm|3gp|ogv|avi)$ {
	error_page	420 = /render/video;
	include     error.conf;
	add_header 	'Vary' 'Accept';
	set 		$video_uri $uri;
	if (!-f $request_filename) {
		return 404;
	}
	set $render true;
	if ($request_method ~ "HEAD")
	{
		set $render false;
	}
	if ($uri ~ '^\/old' )
	{
		set 		$render false;
	}
	if ($uri ~ '\b(?:json|xml)\b' )
	{
		set 		$render false;
		add_header  Content-Disposition 'attachment; filename="$request_basename"';
	}
	if ($http_range ~ '\bbytes=' )
	{
		set $render false;
	}
	if ($args ~ '\bdl[=&]?')
	{
		set 		$render false;
		add_header  Content-Disposition 'attachment; filename="$request_basename"';
	}
	if ($render = true) {
		return 420;
	}
}
location ~* \.(mp3|oga|ogg|m4a|wav)$ {
	error_page	420 = /render/audio;
	include     error.conf;
	add_header 	'Vary' 'Accept';
	set 		$video_uri $uri;
	add_header 	X-Render "audio";
	if (!-f $request_filename) {
		return 404;
	}
	set $render true;
	if ($request_method ~ "HEAD")
	{
		set $render false;
	}
	if ($uri ~ '^\/old' )
	{
		set 		$render false;
	}
	if ($uri ~ '\b(?:json|xml)\b' )
	{
		set 		$render false;
		add_header  Content-Disposition 'attachment; filename="$request_basename"';
	}
	if ($http_referer ~ 'client' )
	{
		set $render false;
	}
	if ($args ~ '\bdl[=&]?')
	{
		set 		$render false;
		add_header  Content-Disposition 'attachment; filename="$request_basename"';
	}
#	if ($render = true) {
#		return 420;
#	}
}
